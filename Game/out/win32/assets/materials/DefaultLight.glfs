#version 150 core

in vec4 Color;
in vec2 Texcoord;
in vec3 FragPos;
in vec3 Normal;

out vec4 outColor;

uniform sampler2D texSample;
uniform vec3 lightPos; 
uniform vec3 lightColor;
uniform vec3 viewPos;

void main()
{
	// Ambient
    float ambientStrength = 0.3f;
    vec3 ambient = ambientStrength * lightColor;
	
	// Diffuse
	vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
	
	// Specular
	float specularStrength = 0.5f;
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 256);
	vec3 specular = specularStrength * spec * lightColor;  

    outColor = vec4(diffuse + ambient + specular, 1.0f) * Color * texture(texSample, Texcoord);
}